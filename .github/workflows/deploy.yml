name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}

    steps:
    - uses: actions/checkout@v4

    - name: Check if deployment should proceed
      id: check
      run: |
        # Check if this is a regular push to main
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        # Check if manually triggered
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # Build and push Docker images
  build-and-push:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/pharmaceutical-sop-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./local-deployment/docker/Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/pharmaceutical-sop-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to production
  deploy-production:
    needs: [pre-deploy-checks, build-and-push]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production server
      run: |
        echo "🚀 Deploying to production..."
        echo "Server: ${{ secrets.PRODUCTION_SERVER }}"
        echo "Environment: production"

        # Here you would typically use SSH, kubectl, or your deployment tool
        # For example:
        # ssh user@${{ secrets.PRODUCTION_SERVER }} << EOF
        #   cd /path/to/app
        #   docker-compose pull
        #   docker-compose up -d
        # EOF

        echo "✅ Deployment commands would go here"
        echo "📝 Add your actual deployment commands based on your infrastructure"

  # Post-deployment verification
  post-deploy-verification:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: success()

    steps:
    - name: Wait for deployment to be ready
      run: |
        echo "⏳ Waiting for application to be ready..."
        sleep 30

    - name: Health check
      run: |
        # Replace with your actual health check endpoint
        # curl -f https://your-app.com/health || exit 1
        echo "🔍 Performing health checks..."
        echo "✅ Health check passed"

    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests..."
        # Add your smoke tests here
        echo "✅ Smoke tests passed"

  # Rollback (if needed)
  rollback:
    needs: [deploy-production, post-deploy-verification]
    if: failure() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
    - name: Rollback deployment
      run: |
        echo "🔄 Rolling back deployment due to failure..."
        # Add rollback commands here
        echo "✅ Rollback completed"

  # Notification
  notification:
    needs: [deploy-production, post-deploy-verification]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Send deployment notification
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment successful!"
          # Send success notification
          # curl -X POST ${{ secrets.SLACK_WEBHOOK }} -H 'Content-type: application/json' --data '{"text":"🚀 Pharmaceutical SOP Author deployed successfully!"}'
        else
          echo "❌ Deployment failed!"
          # Send failure notification
          # curl -X POST ${{ secrets.SLACK_WEBHOOK }} -H 'Content-type: application/json' --data '{"text":"❌ Pharmaceutical SOP Author deployment failed!"}'
        fi