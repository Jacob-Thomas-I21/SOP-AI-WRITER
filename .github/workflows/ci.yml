name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
      run: |
        cd backend
        python -c "from app.core.database import init_db; init_db()"
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm run type-check
        npm run lint

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dependency Check
  dependency-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check Python dependencies
      run: |
        cd backend
        pip install safety
        safety check --file requirements.txt --output json || true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Check Node.js dependencies
      run: |
        cd frontend
        npm install
        npx audit-ci --config audit-ci.json || true

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Check Python code quality
      run: |
        cd backend
        black --check --diff app/
        isort --check-only --diff app/
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503
        mypy app/ --ignore-missing-imports

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Check frontend code quality
      run: |
        cd frontend
        npm install
        npm run lint
        npm run type-check

  # Docker Build Test
  docker-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./local-deployment/docker/Dockerfile.backend
        push: false
        tags: pharmaceutical-sop-author-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      run: |
        docker build -f ./frontend/Dockerfile ./frontend -t pharmaceutical-sop-author-frontend:test || echo "Frontend Dockerfile not found, skipping"

  # Compliance Check
  compliance-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check for sensitive data
      run: |
        # Check for API keys, passwords, tokens
        if grep -r "password\|token\|secret\|key" --include="*.py" --include="*.ts" --include="*.js" --include="*.json" --include="*.env*" . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=__pycache__ | grep -v "password.*=" | grep -v "token.*=" | grep -v "secret.*=" | grep -v "key.*="; then
          echo "⚠️  Potential sensitive data found in code"
          exit 1
        else
          echo "✅ No obvious sensitive data found"
        fi

    - name: Check file permissions
      run: |
        find . -name "*.sh" -o -name "*.py" -o -name "*.js" | xargs ls -la | awk '{if ($1 ~ /x/) print "Executable file:", $9}'

    - name: Validate JSON/YAML files
      run: |
        find . -name "*.json" -o -name "*.yml" -o -name "*.yaml" | while read file; do
          if ! python -c "import json; json.load(open('$file'))" 2>/dev/null && ! python -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
            echo "Invalid JSON/YAML: $file"
            exit 1
          fi
        done
        echo "✅ All JSON/YAML files are valid"