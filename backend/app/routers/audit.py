import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlmodel import Session, select

from app.core.database import get_session
from app.core.security import get_current_user, require_role, PharmaceuticalRoles
from app.models.user import User
from app.models.audit import AuditLog, AuditLogResponse, AuditSummary, ComplianceReport
from app.services.audit_service import AuditService
from app.utils.logging import log_regulatory_event, get_pharmaceutical_logger

router = APIRouter()
logger = get_pharmaceutical_logger(__name__)
audit_service = AuditService()


@router.get("/summary", response_model=AuditSummary)
async def get_audit_summary(
    days_back: int = Query(30, ge=1, le=365),
    session: Session = Depends(get_session),
    current_user: User = Depends(require_role(PharmaceuticalRoles.QA_REVIEWER)),
):
    """Get comprehensive audit summary for pharmaceutical compliance."""

    try:
        summary = await audit_service.get_audit_summary(days_back, session)

        log_regulatory_event(
            logger,
            f"Audit summary accessed for {days_back} days by {current_user.email}",
            event_type="audit_summary_access",
            user_id=str(current_user.id),
            compliance_context="compliance_reporting",
        )

        return summary

    except Exception as e:
        logger.error(f"Audit summary failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Audit summary retrieval failed",
        )


@router.get("/logs", response_model=List[AuditLogResponse])
async def get_audit_logs(
    page: int = Query(1, ge=1),
    page_size: int = Query(50, ge=1, le=1000),
    user_id: Optional[str] = None,
    resource_type: Optional[str] = None,
    action: Optional[str] = None,
    severity: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    session: Session = Depends(get_session),
    current_user: User = Depends(require_role(PharmaceuticalRoles.QA_REVIEWER)),
):
    """Get filtered audit logs for pharmaceutical compliance review."""

    try:
        query = select(AuditLog)

        # Apply filters
        if user_id:
            query = query.where(AuditLog.user_id == user_id)
        if resource_type:
            query = query.where(AuditLog.resource_type == resource_type)
        if action:
            query = query.where(AuditLog.action == action)
        if severity:
            query = query.where(AuditLog.severity == severity)
        if start_date:
            query = query.where(AuditLog.timestamp >= start_date)
        if end_date:
            query = query.where(AuditLog.timestamp <= end_date)

        # Apply pagination
        offset = (page - 1) * page_size
        query = (
            query.order_by(AuditLog.timestamp.desc()).offset(offset).limit(page_size)
        )

        audit_logs = session.exec(query).all()

        log_regulatory_event(
            logger,
            f"Audit logs accessed by {current_user.email} (page {page})",
            event_type="audit_logs_access",
            user_id=str(current_user.id),
            compliance_context="audit_review",
        )

        return [AuditLogResponse.from_orm(log) for log in audit_logs]

    except Exception as e:
        logger.error(f"Audit logs retrieval failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Audit logs retrieval failed",
        )


@router.get("/compliance-report")
async def generate_compliance_report(
    start_date: datetime,
    end_date: datetime,
    session: Session = Depends(get_session),
    current_user: User = Depends(require_role(PharmaceuticalRoles.QA_APPROVER)),
):
    """Generate comprehensive pharmaceutical compliance report."""

    try:
        report = await audit_service.generate_compliance_report(
            start_date, end_date, session
        )

        log_regulatory_event(
            logger,
            f"Compliance report generated by {current_user.email} for period {start_date} to {end_date}",
            event_type="compliance_report_generation",
            user_id=str(current_user.id),
            compliance_context="regulatory_reporting",
        )

        return report

    except Exception as e:
        logger.error(f"Compliance report generation failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Compliance report generation failed",
        )


@router.get("/data-integrity-check/{resource_id}")
async def perform_data_integrity_check(
    resource_id: str,
    resource_type: str,
    session: Session = Depends(get_session),
    current_user: User = Depends(require_role(PharmaceuticalRoles.QA_REVIEWER)),
):
    """Perform data integrity check on specific resource."""

    try:
        integrity_check = await audit_service.perform_data_integrity_check(
            resource_id, resource_type, session
        )

        log_regulatory_event(
            logger,
            f"Data integrity check performed on {resource_type}:{resource_id} by {current_user.email}",
            event_type="data_integrity_check",
            user_id=str(current_user.id),
            compliance_context="data_integrity_validation",
        )

        return integrity_check

    except Exception as e:
        logger.error(f"Data integrity check failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Data integrity check failed",
        )


@router.get("/users/{user_id}/activity")
async def get_user_audit_activity(
    user_id: str,
    days_back: int = Query(30, ge=1, le=365),
    session: Session = Depends(get_session),
    current_user: User = Depends(require_role(PharmaceuticalRoles.QA_REVIEWER)),
):
    """Get audit activity for specific user."""

    try:
        cutoff_date = datetime.utcnow() - timedelta(days=days_back)

        user_logs = session.exec(
            select(AuditLog)
            .where(AuditLog.user_id == user_id)
            .where(AuditLog.timestamp >= cutoff_date)
            .order_by(AuditLog.timestamp.desc())
        ).all()

        # Summarize activity
        activity_summary = {
            "user_id": user_id,
            "period_days": days_back,
            "total_actions": len(user_logs),
            "actions_by_type": {},
            "resources_accessed": set(),
            "compliance_events": 0,
            "gmp_relevant_events": 0,
            "recent_activity": [],
        }

        for log in user_logs:
            # Count actions by type
            action_type = (
                log.action.value if hasattr(log.action, "value") else str(log.action)
            )
            activity_summary["actions_by_type"][action_type] = (
                activity_summary["actions_by_type"].get(action_type, 0) + 1
            )

            # Track resources
            activity_summary["resources_accessed"].add(
                f"{log.resource_type}:{log.resource_id}"
            )

            # Count compliance events
            if log.compliance_event:
                activity_summary["compliance_events"] += 1
            if log.gmp_relevance:
                activity_summary["gmp_relevant_events"] += 1

            # Add to recent activity (last 10)
            if len(activity_summary["recent_activity"]) < 10:
                activity_summary["recent_activity"].append(
                    {
                        "timestamp": log.timestamp.isoformat(),
                        "action": action_type,
                        "resource": f"{log.resource_type}:{log.resource_id}",
                        "description": log.description,
                    }
                )

        # Convert set to count
        activity_summary["unique_resources_accessed"] = len(
            activity_summary["resources_accessed"]
        )
        del activity_summary["resources_accessed"]

        log_regulatory_event(
            logger,
            f"User activity audit accessed for user {user_id} by {current_user.email}",
            event_type="user_activity_audit",
            user_id=str(current_user.id),
            compliance_context="user_activity_monitoring",
        )

        return activity_summary

    except Exception as e:
        logger.error(f"User activity audit failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="User activity audit failed",
        )


@router.get("/system-events/critical")
async def get_critical_system_events(
    hours_back: int = Query(24, ge=1, le=168),
    session: Session = Depends(get_session),
    current_user: User = Depends(require_role(PharmaceuticalRoles.QA_APPROVER)),
):
    """Get critical system events for immediate attention."""

    try:
        cutoff_time = datetime.utcnow() - timedelta(hours=hours_back)

        critical_events = session.exec(
            select(AuditLog)
            .where(AuditLog.severity == "critical")
            .where(AuditLog.timestamp >= cutoff_time)
            .order_by(AuditLog.timestamp.desc())
        ).all()

        events_summary = {
            "period_hours": hours_back,
            "critical_events_count": len(critical_events),
            "events": [],
            "summary_by_type": {},
            "requires_immediate_action": [],
        }

        for event in critical_events:
            event_data = {
                "timestamp": event.timestamp.isoformat(),
                "user_id": event.user_id,
                "action": (
                    event.action.value
                    if hasattr(event.action, "value")
                    else str(event.action)
                ),
                "resource": f"{event.resource_type}:{event.resource_id}",
                "description": event.description,
                "regulatory_impact": event.regulatory_impact,
                "requires_review": event.requires_review,
            }

            events_summary["events"].append(event_data)

            # Summarize by event type
            event_type = event.resource_type
            events_summary["summary_by_type"][event_type] = (
                events_summary["summary_by_type"].get(event_type, 0) + 1
            )

            # Flag events requiring immediate action
            if event.requires_review and not event.reviewed_at:
                events_summary["requires_immediate_action"].append(event_data)

        log_regulatory_event(
            logger,
            f"Critical system events reviewed by {current_user.email}",
            event_type="critical_events_review",
            user_id=str(current_user.id),
            compliance_context="critical_event_monitoring",
        )

        return events_summary

    except Exception as e:
        logger.error(f"Critical system events retrieval failed: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Critical system events retrieval failed",
        )


@router.get("/health")
async def audit_health_check():
    """Audit service health check."""
    return {
        "status": "healthy",
        "service": "audit_compliance",
        "timestamp": datetime.utcnow().isoformat(),
        "compliance_features": {
            "audit_trail_logging": "operational",
            "data_integrity_monitoring": "active",
            "regulatory_reporting": "available",
            "compliance_analytics": "enabled",
            "fda_21_cfr_part_11": "compliant",
            "alcoa_plus_principles": "implemented",
        },
    }
